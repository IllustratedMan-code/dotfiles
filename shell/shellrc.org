* bashrc sources
:PROPERTIES:
:HEADER-ARGS: :tangle SRC.sh
:END:
All code blocks here are appended to the bashrc file. The purpose of this file is to source the other files
** Generic rc
#+begin_src sh
source ~/.config/shell/generic.sh
#+end_src
** Bash Specific
#+begin_src sh
if echo $SHELL | grep -q "bash"; then
    source ~/.config/shell/bash.sh
fi
#+end_src
** zsh Specific
#+begin_src sh
if echo $SHELL | grep -q "zsh"; then
    source ~/.config/shell/zsh.sh
fi
#+end_src

** Sway
#+begin_src sh
if command -v sway &> /dev/null
   then
       source ~/.config/shell/swayBashrc.sh
fi
#+end_src
* generic zsh/Bashrc
:PROPERTIES:
:HEADER-ARGS: :tangle generic.sh
:END:
This is will be included in .bashrc regardless of linux install.
** Test if interactive
#+begin_src sh
# If not running interactively, don't do anything
[[ $- != *i* ]] && return
#+end_src
** set vi keybinds
#+begin_src sh
# set -o vi
#+end_src
** aliases
#+begin_src sh
alias pm='paru'
alias ls='ls --color=auto'
alias pmi='paru -S'
alias pms='paru -Ss'
alias pmr='paru -R'
alias vi='nvim'
alias vim='nvim'
alias vimedit='export EDITOR=nvim && sudoedit'
alias emacsedit='export EDITOR=emacsclient && sudoedit'
alias e='emacsclient'
alias v='nvim'
alias update-grub='grub-mkconfig -o /boot/grub/grub.cfg'
alias sudo='sudo '
alias c='clear'
alias top='vtop --theme nord'
alias open='xdg-open'
# nix aliases
alias update-input='nix flake lock --update-input'
#+end_src

#+RESULTS:

** Functions
#+begin_src sh
pdfcombine ()
{
   gs -q -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=${1%.*}.pdf -dBATCH ${@:2}
}

# pdfinterleave odd.pdf even.pdf output.pdf
pdfinterleave ()
{
    pdftk A=${1%.*}.pdf B=${2%.*}.pdf shuffle A B output ${3%.*}.pdf
}
pdfinterleavebend ()
{
    pdftk A=${1%.*}.pdf B=${2%.*}.pdf shuffle A Bend-1 output ${3%.*}.pdf
}
nrs ()
{
    (cd ~/dotfiles && git add . && git commit -m "nix change" && git push)
    (cd ~/nixconfig && nix flake lock --update-input dotfiles)
    nixos-rebuild switch --flake $HOME/nixconfig --use-remote-sudo
}
#+end_src
** Environment variables
#+begin_src sh
export PATH=$PATH:~/.emacs.d/bin
export PATH=$PATH:~/.ghcup/bin
export PATH=$PATH:~/node_modules/.bin
export PATH=$PATH:~/.local/bin
export PATH=$PATH:~/.npm-global/bin
export PATH=$PATH:~/.cargo/bin
#+end_src
* Bash Specific
:PROPERTIES:
:HEADER-ARGS: :tangle bash.sh
:END:
** set the prompt text with the PS1 variable
#+begin_src sh
PS1='\w > '
eval "$(direnv hook bash)"
#+end_src
* Zsh Specific
:PROPERTIES:
:HEADER-ARGS: :tangle zsh.sh
:END:
** set the prompt text with the PS1 variable
#+begin_src sh
# this will get overwritten if oh-my-zsh is used
PS1='%F{green}%~%f > '
eval "$(direnv hook zsh)"

#+end_src
** Persistent history
#+begin_src sh
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt INC_APPEND_HISTORY
#+end_src
** oh-my-zsh
#+begin_src sh
DEFAULT_USER=$USER
#+end_src

* Sway specific
:PROPERTIES:
:HEADER-ARGS: :tangle swayBashrc.sh
:END:
** aliases
#+begin_src sh
alias web="swaymsg workspace web"
#+end_src
** Environment variables
#+begin_src sh
# qt themeing
export XDG_CURRENT_DESKTOP=UNITY slack
export QT_QPA_PLATFORMTHEME=qt5ct

# grimshot screenshots directory
export XDG_SCREENSHOTS_DIR=~/Pictures/Screenshots
#+end_src

* Install
:PROPERTIES:
:HEADER-ARGS: :tangle ../installShell.sh
:END:
This script installs the bash config
** symlink files to .config/bash
#+begin_src sh
rm -rf $HOME/.config/shell
cp -r ./shell $HOME/.config/shell
#+end_src

** add src file to bashrc
#+begin_src sh
SRC="$HOME/.config/shell/SRC.sh"
grep -q $SRC $HOME/.bashrc || sed -i "1s,^,source $SRC \n," $HOME/.bashrc
#+end_src
** add src file to zshrc
#+begin_src sh
SRC="$HOME/.config/shell/SRC.sh"
grep -q $SRC $HOME/.zshrc || sed -i "1s,^,source $SRC \n," $HOME/.zshrc
#+end_src

* Local Variables :noexport:
local variables:
org-export-babel-evaluate: nil
eval: (add-hook 'after-save-hook 'org-babel-tangle t t)
end:
