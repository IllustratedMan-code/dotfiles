#+TITLE: Doom configuration
#+STARTUP: overview
* Identity information
#+BEGIN_SRC elisp
(setq user-full-name "David Lewis"
      user-mail-address "davidalewis00@gmail.com")
#+END_SRC
* Doom config
#+begin_src elisp
(setq! doom-private-dir "~/dotfiles/.doom.d/")
#+end_src
* Build information
#+begin_src sh :tangle no
./configure -with-json -with-imagemagick --with-xpm=ifavailable --with-native-compilation
#+end_src
* Theme
set theme with doom-theme or load theme with load-theme
#+BEGIN_SRC elisp
(setq doom-theme 'doom-base16)
(setq doom-themes-treemacs-theme "doom-colors")
(add-hook 'pdf-tools-enabled-hook 'pdf-view-themed-minor-mode)
#+END_SRC
* Org Setup
** Org Directory
#+BEGIN_SRC elisp
(setq org-directory "~/Dropbox/org/")
#+END_SRC
** Hide emphasis markers
#+BEGIN_SRC elisp
(setq org-hide-emphasis-markers 't)
#+END_SRC
** Org Tab behaviour
  #+BEGIN_SRC elisp
  (after! evil-org
    (setq org-tab-first-hook nil))
  #+END_SRC
** org code blocks
#+begin_src elisp
(defun insert-jupyter-python-block ()
  "Inserts a python code block"
  (interactive)
  (progn
    (insert "#+begin_src jupyter-python :session py\n"
            "#+end_src")
    )
  (org-edit-special)
  )

(defun insert-jupyter-ess-block()
  "Inserts an ESS(R) code block"
  (interactive)
  (insert "#+begin_src jupyter-R :session R\n"
          "#+end_src")
  (org-edit-special)
  )

(defun insert-elisp-block()
  "inserts an elisp code block"
  (interactive)
  (insert "#+begin_src elisp\n"
          "#+end_src")
  (org-edit-special)
  )

(defun insert-generic-block()
  "inserts an elisp code block"
  (interactive)
  (insert "#+begin_src " (read-string "Enter src type:") "\n"
          "#+end_src")
  (org-edit-special)
  )
(defun insert-gnuplot-block()
  (interactive)
  (insert "#+begin_src gnuplot :results output :file " (read-string "Enter file name:") "\n"
          "#+end_src")
  (org-edit-special)
  )

(defun copy-down-x (x)
  "copies the current cell down by the universal arg"
  (interactive "P")
  (cl-loop repeat (or x  1)
           do (org-table-copy-down 0))
        )
(defun universal-test (x)
  (interactive "P")
  (cl-loop repeat x
           do (message "hello"))
  (message "done"))
#+end_src

** Functions
#+begin_src elisp
(defun cache-address ()
 (interactive)
 (progn
   (setq size (read-string "Enter the MM size: "))
   (setq strunit (substring size -2 nil))
   (if (eq (compare-strings strunit nil nil "GB" nil nil) 't)
       (message "true"))
 )
 )
#+end_src

** Org default image size
#+begin_src elisp
(after! evil-org
(setq org-image-actual-width 400))
#+end_src

** org keymap
#+begin_src elisp
(map! (:after org
       :map org-mode-map
       :nvi "S-<return>" #'copy-down-x
       :leader
       (:prefix ("j" . "jupyter-source")
        :desc "jupyter-python" "p" #'insert-jupyter-python-block
        :desc "jupyter-R" "r" #'insert-jupyter-ess-block
        :desc "elisp" "e" #'insert-elisp-block
        :desc "gnuplot" "g" #'insert-gnuplot-block
        :desc "generic" "b" #'insert-generic-block)))
#+end_src

** org headline
#+begin_src elisp
(setq org-fontify-todo-headline t)
#+end_src
** org-fancy-priorities-mode work around
#+begin_src elisp
(defadvice! +org-dont-fontify-my-thangs-a (orig-fn &rest args)
  :around '(org-superstar-mode org-fancy-priorities-mode)
  (letf! ((#'font-lock-ensure #'ignore)
          (#'font-lock-flush #'ignore)
          (#'font-lock-fontify-buffer #'ignore))
    (apply orig-fn args)))
#+end_src
** org-safe-variables
*** html export
#+begin_src elisp
(add-to-list 'safe-local-eval-forms '(add-hook 'after-save-hook 'org-html-export-to-html t t))
(add-to-list 'safe-local-eval-forms '(add-hook 'after-save-hook 'org-re-reveal-export-to-html t t))
#+end_src

#+RESULTS:
| add-hook | 'after-save-hook      | 'org-re-reveal-export-to-html | t   | t |
| add-hook | 'after-save-hook      | 'org-html-export-to-html      | t   | t |
| add-hook | 'write-file-hooks     | 'time-stamp                   |     |   |
| add-hook | 'write-file-functions | 'time-stamp                   |     |   |
| add-hook | 'before-save-hook     | 'time-stamp                   | nil | t |
| add-hook | 'before-save-hook     | 'delete-trailing-whitespace   | nil | t |
*** Latex Export
#+begin_src elisp
(add-to-list 'safe-local-eval-forms '(add-hook 'after-save-hook 'org-latex-export-to-pdf t t))
#+end_src
*** Org-babel
#+begin_src elisp
(add-to-list 'safe-local-eval-forms '(add-hook 'after-save-hook 'org-babel-tangle t t))
#+end_src

#+RESULTS:
| add-hook | 'org-export-before-parsing-hook | '(delete-matching-lines begin_export) |     |   |
| add-hook | 'org-export-before-parsing-hook | '(delete-matching-lines end_export)   |     |   |
| add-hook | 'org-export-before-parsing-hook | (delete-matching-lines begin_export)  |     |   |
| add-hook | 'org-export-before-parsing-hook | (delete-matching-lines end_export)    |     |   |
| add-hook | 'after-save-hook                | 'org-babel-tangle                     | t   | t |
| add-hook | 'after-save-hook                | 'org-re-reveal-export-to-html         | t   | t |
| add-hook | 'after-save-hook                | 'org-html-export-to-html              | t   | t |
| add-hook | 'write-file-hooks               | 'time-stamp                           |     |   |
| add-hook | 'write-file-functions           | 'time-stamp                           |     |   |
| add-hook | 'before-save-hook               | 'time-stamp                           | nil | t |
| add-hook | 'before-save-hook               | 'delete-trailing-whitespace           | nil | t |
** format all error
#+begin_src elisp
(add-to-list '+format-on-save-enabled-modes 'web-mode 1)
#+end_src

#+RESULTS:
| not | emacs-lisp-mode | sql-mode | tex-mode | latex-mode | org-msg-edit-mode | web-mode |
** gnuplot
This block changes the default term type for png file types
#+begin_src elisp
(after! gnuplot (add-to-list '*org-babel-gnuplot-terms* '(png . "pngcairo transparent")))
#+end_src

#+RESULTS:
: ((png . pngcairo transparent) (eps . postscript eps))
** org-fragtog
#+begin_src elisp
(use-package! org-fragtog
  :after org
  :hook (org-mode . org-fragtog-mode)
  :config)
#+end_src
** ispell
** Startup
#+begin_src elisp
(after! org
  (setq! org-startup-with-latex-preview t)
  (setq! org-startup-with-inline-images t)
  (setq! org-latex-image-default-width "1in")
  (setq! org-cite-global-bibliography (list"~/dotfiles/citations.json"))
  (setq! org-cite-export-processors '(t csl))
  (setq! yas/triggers-in-field t)
  (setq! org-xournalpp-image-type 'png)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (setq! org-export-allow-bind-keywords t))
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes '("apa" "\\documentclass[11pt]{apa7}"
                                    ("\\part{%s}" . "\\part*{%s}")
                                    ("\\chapter{%s}" . "\\chapter*{%s}")
                                    ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}")
                                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes '("mla" "\\documentclass{mla}"
                                    ("\\part{%s}" . "\\part*{%s}")
                                    ("\\chapter{%s}" . "\\chapter*{%s}")
                                    ("\\section{%s}" . "\\section*{%s}")
                                    ("\\subsection{%s}" . "\\subsection*{%s}")
                                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
            '("memo" "\\documentclass{texMemo}"
                ("\\section{%s}" . "\\section*{%s}")
                ("\\subsection{%s}" . "\\subsection*{%s}")
                ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
                ))
#+end_src

#+RESULTS:
| mla     | \documentclass{mla}                                      | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| mla     | \documentclass{article} \usepackage{~/.doom.d/mla13.sty} | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| mla     | \documentclass[11pt]{mla}                                | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| beamer  | \documentclass[presentation]{beamer}                     | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |                                      |                                            |
| apa     | \documentclass[11pt]{apa7}                               | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| article | \documentclass[11pt]{article}                            | (\section{%s} . \section*{%s}) | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) | (\paragraph{%s} . \paragraph*{%s})   | (\subparagraph{%s} . \subparagraph*{%s})   |
| report  | \documentclass[11pt]{report}                             | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |
| book    | \documentclass[11pt]{book}                               | (\part{%s} . \part*{%s})       | (\chapter{%s} . \chapter*{%s})       | (\section{%s} . \section*{%s})             | (\subsection{%s} . \subsection*{%s}) | (\subsubsection{%s} . \subsubsection*{%s}) |

** citations
#+begin_src elisp
(use-package! bibtex-completion
  :defer t
  :config
  (setq bibtex-completion-additional-search-fields '(keywords)
        bibtex-completion-pdf-field "file")) ; This tell bibtex-completion to look at the File field of the bibtex to figure out which pdf to open

(use-package! bibtex-actions
  :after embark bibtex-completion
  :config
  (add-to-list 'embark-keymap-alist '(bibtex . bibtex-actions-map)))

(use-package! citeproc
  :defer t)

;;; Org-Cite configuration

(use-package! oc
  :after org bibtex-completion bibtex-actions
  :config
  (require 'ox)
  (map! :map org-mode-map
        :localleader
        :desc "Insert citation" "@" #'org-cite-insert)
  (defvar bibtex-actions-bibliography nil)
  (setq org-cite-global-bibliography
        (let ((paths (or bibtex-actions-bibliography
                         bibtex-completion-bibliography)))
          ;; Always return bibliography paths as list for org-cite.
          (if (stringp paths) (list paths) paths)))
  ;; setup export processor; default csl/citeproc-el, with biblatex for latex
  (setq org-cite-export-processors '((t csl))))

;;; Org-cite processors

;;;; Core

(use-package! oc-basic
  :after oc)

(use-package! oc-biblatex
  :after oc)

(use-package! oc-csl
  :after oc
  :config
  (setq org-cite-csl-styles-dir "~/Zotero/styles"))

(use-package! oc-natbib
  :after oc)
#+end_src

** set header args
#+begin_src elisp
(setq! org-global-properties '(("header-args:latex" . ":results output file graphics :imagemagick yes :headers '(\"\\\\usepackage{tikz}\ \\\\usepackage{siunitx}\ \\\\usepackage{gensymb}\") :fit yes :iminoptions -density 600")
                               ("header-args" . ":pandoc t")))
#+end_src

#+RESULTS:
: ((header-args:latex . :results output file graphics :imagemagick yes :headers '("\\usepackage{tikz}\\usepackage{siunitx}") :fit yes :iminoptions -density 600) (header-args . :pandoc t))
** org-xournalpp
#+begin_src elisp
;;(use-package! org-xournalpp
;;  :config
;;  (add-hook 'org-mode-hook 'org-xournalpp-mode))

#+end_src
#+RESULTS:
| er/add-org-mode-expansions | edraw-org-link-image-mode | org-fragtog-mode | +lookup--init-org-mode-handlers-h | (closure (t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | +org-enable-auto-reformat-tables-h | +org-enable-auto-update-cookies-h | +org-make-last-point-visible-h | org-fancy-priorities-mode | org-superstar-mode | evil-org-mode | toc-org-enable | writegood-mode | embrace-org-mode-hook | org-eldoc-load | +literate-enable-recompile-h |
** Disable Line wrapping
#+begin_src elisp
(after! org
  (setq! org-startup-truncated 'nil)
  )
#+end_src

#+RESULTS:
** Org pomodoro
#+begin_src elisp
(setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
(defun david/org-pomodoro-time ()
  "Return the remaining pomodoro time"
  (if (fboundp 'org-pomodoro-active-p)
  (if (org-pomodoro-active-p)
      (cl-case org-pomodoro-state
        (:pomodoro
           (format "Pomo: %d minutes - %s" (/ (org-pomodoro-remaining-seconds) 60) org-clock-heading))
        (:short-break
         (format "Short break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
        (:long-break
         (format "Long break time: %d minutes" (/ (org-pomodoro-remaining-seconds) 60)))
        (:overtime
         (format "Overtime! %d minutes" (/ (org-pomodoro-remaining-seconds) 60))))
    "No active pomo") "no active pomo"))
(use-package org-pomodoro
  :ensure t
  :commands (org-pomodoro)
  :config
  (setq
   org-pomodoro-length 50
   org-pomodoro-short-break-length 10
   ))
#+end_src

#+RESULTS:
: david/org-pomodoro-time

** nix hack
Org mode (latex export) has the wrong time. Not sure how to fix. This does not work.
#+begin_src elisp

#+end_src

#+RESULTS:
: 1643676254
** plantuml
#+begin_src elisp
(after! org (setq! org-plantuml-exec-mode 'plantuml))
#+end_src
** mathjax

* Latex setup
** Use LuaTex
#+begin_src elisp
(setq! TeX-engine 'luatex)
(after! org
  ;(setq! org-latex-pdf-process '("PDFLATEX=lualatex LATEX=lualatex texi2dvi --pdf --clean --verbose --batch --shell-escape -output-directory=%o %f")))
(setq! org-latex-pdf-process '("latexmk -f -pdf -%latex -interaction=nonstopmode -shell-excape -output-directory=%o %f")))
(after! org
  (setq! org-latex-compiler "lualatex"))
(after! org
  (setq! org-latex-listings 'minted))
(after! org
  (setq! org-latex-minted-options
         '(
             ("fontsize" "\\scriptsize")
             )
                ))
#+end_src

#+RESULTS:
** Extra Packages
#+begin_src elisp
(after! org
  (setq! org-latex-packages-alist '())
  (add-to-list 'org-latex-packages-alist '("" "physics" t))
  (add-to-list 'org-latex-packages-alist '("" "minted" nil))
)
#+end_src

#+RESULTS:
|   | minted  | nil |
|   | physics | t   |

** Keymap
#+begin_src elisp
(map!  (:after auctext
       :map LaTeX-mode-map
       :leader
       :desc "compile" "c" #'TeX-command-master))
#+end_src

#+RESULTS:

* Spell setup
** Personal Dictionary
#+begin_src elisp
(setq! ispell-personal-dictionary "~/.config/spell/dict.txt")
#+end_src
** Fix hunspell bug
#+begin_src elisp
(setq ispell-program-name "hunspell")
(ispell-check-version)
#+end_src

* Python setup

** Anaconda directory
#+begin_src elisp
(setq conda-anaconda-home "~/opt/anaconda")
#+end_src
** LSP nix
#+begin_src elisp
(after! lsp-python-ms
  (setq lsp-python-ms-executable (executable-find "python-language-server"))
  (set-lsp-priority! 'mspyls 1))
(after! lsp-rust-rls
  (setq lsp-rust-rls-server-command (executable-find "rls"))
  (set-lsp-priority! 'rls 1))

(after! lsp-clients-lua-language-server
  (setq lsp-clients-lua-language-server-bin (executable-find "lua-language-server"))
  (set-lsp-priority! 'lua-language-server 1))
#+end_src

#+RESULTS:
: /etc/profiles/per-user/david/bin/lua-language-server

* R setup
** keymap
#+begin_src elisp
(map! (:after ess-mode
       :map ess-mode-map
       :nvi "C-<return>" #'ess-eval-line-and-step
       :nvi "M-e" #'insert-R-assign
       )
      )
#+end_src

#+RESULTS:
** Font lock keywords
*** R-major-mode
#+begin_src elisp
(setq ess-R-font-lock-keywords '(
 (ess-R-fl-keyword:keywords . t)
 (ess-R-fl-keyword:constants . t)
 (ess-R-fl-keyword:modifiers . t)
 (ess-R-fl-keyword:fun-defs . t)
 (ess-R-fl-keyword:assign-ops . t)
 (ess-R-fl-keyword:%op% . t)
 (ess-fl-keyword:fun-calls . t)
 (ess-fl-keyword:numbers . t)
 (ess-fl-keyword:operators . t)
 (ess-fl-keyword:delimiters . t)
 (ess-fl-keyword:= . t)
 (ess-R-fl-keyword:F&T . t)
 )
)
#+end_src

#+RESULTS:
: ((ess-R-fl-keyword:keywords . t) (ess-R-fl-keyword:constants . t) (ess-R-fl-keyword:modifiers . t) (ess-R-fl-keyword:fun-defs . t) (ess-R-fl-keyword:assign-ops . t) (ess-R-fl-keyword:%op% . t) (ess-fl-keyword:fun-calls . t) (ess-fl-keyword:numbers . t) (ess-fl-keyword:operators . t) (ess-fl-keyword:delimiters . t) (ess-fl-keyword:= . t) (ess-R-fl-keyword:F&T . t))

*** R-inferior-mode
#+begin_src elisp
(setq inferior-ess-r-font-lock-keywords '(
 (ess-R-fl-keyword:keywords . t)
 (ess-R-fl-keyword:constants . t)
 (ess-R-fl-keyword:modifiers . t)
 (ess-R-fl-keyword:fun-defs . t)
 (ess-R-fl-keyword:assign-ops . t)
 (ess-R-fl-keyword:%op% . t)
 (ess-fl-keyword:fun-calls . t)
 (ess-fl-keyword:numbers . t)
 (ess-fl-keyword:operators . t)
 (ess-fl-keyword:delimiters . t)
 (ess-fl-keyword:= . t)
 (ess-R-fl-keyword:F&T . t)
 )
)
#+end_src

#+RESULTS:
: ((ess-R-fl-keyword:keywords . t) (ess-R-fl-keyword:constants . t) (ess-R-fl-keyword:modifiers . t) (ess-R-fl-keyword:fun-defs . t) (ess-R-fl-keyword:assign-ops . t) (ess-R-fl-keyword:%op% . t) (ess-fl-keyword:fun-calls . t) (ess-fl-keyword:numbers . t) (ess-fl-keyword:operators . t) (ess-fl-keyword:delimiters . t) (ess-fl-keyword:= . t) (ess-R-fl-keyword:F&T . t))
** Custom Functions
#+begin_src elisp
(defun insert-R-assign ()
  "Inserts the assign statement in R <-"
  (interactive)
  (insert "<-")
  )
#+end_src

#+RESULTS:
: insert-R-assign

* General configuration
** remove line numbers
#+Begin_SRC elisp
(setq display-line-numbers-type nil)
#+END_SRC
** Fix treemacs ace-window bug
#+BEGIN_SRC elisp
(require 'ace-window)
#+END_SRC
** deletes compilation buffer if successful (ignores python buffers)
#+BEGIN_SRC elisp
(add-hook 'compilation-finish-functions
          (lambda(buffer string)
            (if (and (null (string-match ".*exited abnormally.*" string))
                     (null(eq major-mode 'inferior-python-mode)))
                ;; make compilation window go away after a few seconds
                (progn
                  (run-at-time
                   "1 sec" nil 'delete-windows-on
                   (get-buffer-create "*compilation*"))
                  (print major-mode)
                  (message "Compilation finished successfully")))))
#+END_SRC
** ligatures
#+begin_src elisp
#+end_src

#+RESULTS:
| org-mode |
** ispell dictionary
#+begin_src elisp
(setq! ispell-dictionary "en_US")
#+end_src

#+RESULTS:
: en_US

* Key Map
** General Buffers
#+BEGIN_SRC elisp
(map! :leader
      :desc "treemacs" "0" #'treemacs
      :desc "last-buffer" "l" #'evil-switch-to-windows-last-buffer
      :nv "`" nil
      (:prefix ("w")
       :desc "ace-window" "a" #'ace-window))
#+END_SRC
** Python mode map
#+BEGIN_SRC elisp
(map!  (:map python-mode-map
        :localleader
        :desc "repl" "'" #'+python/open-ipython-repl
        (:prefix ("s" . "send")
         :desc "buffer" "b" #'python-shell-send-buffer
         :desc "function" "f" #'python-shell-send-defun
         :desc "region" "r" #'python-shell-send-region
         :desc "statement" "s" #'python-shell-send-statement)))
#+END_SRC
** prolog map
#+BEGIN_SRC elisp
(map!  (:map prolog-mode-map
        :localleader
        :desc "repl" "'" #'run-prolog
        :desc "file" "f" #'prolog-consult-buffer
        :desc "region" "r" #'prolog-consult-region
        :desc "predicate" "p" #'prolog-consult-region))
#+END_SRC

** Doc-view mode map
#+BEGIN_SRC elisp
(map! (:map doc-view-mode-map
       :nv "l" #'doc-view-next-page
       :nv "h" #'doc-view-previous-page))
#+END_SRC
** mips mode map
#+BEGIN_SRC elisp
(map! (:map mips-mode-map
       :localleader
       (:prefix ("s" . "send")
        :desc "file" "f" #'mips-run-file
        :desc "region" "r" #'mips-run-region
        :desc "buffer" "b" #'mips-run-region)))
#+END_SRC
** haskell map
#+BEGIN_SRC elisp
(map! (:map haskell-mode-map
       :localleader
       :desc "send-file" "f" #'haskell-process-load-file
       :desc "open-haskell" "'" #'run-haskell))
#+END_SRC
* remote
#+begin_src elisp
(setq projectile-file-exists-remote-cache-expire nil)
(setq tramp-auto-save-directory "~/Documents/tramp-autosave")
#+end_src

#+RESULTS:

* Helpful info
** Font variables
+ doom-font (normal font)
+ doom-variable-pitch-font (easy reading font)
+ doom-big-font (doom-big-font-mode for presentations)
** Useful customization functions
+ load! (load external .el files)
+ use-package! (for configuring packages)
+ after! (runs config after packages has loaded)
+ add-load-path! (adds directories to load-path variable)
+ map! (binds keys)
